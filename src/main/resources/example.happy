import src.main.resources.another.{test, makeSpeak}

test("works");

var a = 1;
var b = a + 1;

func add(a: Integer, b: Integer): Integer {
  printLine("adding " + a + " to " + b);
  a + b
}

//add("not a number", "not a number either")

printLine(add(add(a, 100), b + 10));
printLine(a.add(b).add(b));

printLine("Hello, World!");

func print(s: String): String {
  printLine(s);
  s
}
"Hello, Happy!".print();

if a > 0 {
  printLine("Math works!")
} else {
  printLine("Math");
  printLine("is");
  printLine("in");
  printLine("trouble!")
};

var name = "Happy Lang";

if name != "Unhappy Lang" {
  printLine("I'm a Happy dev!")
} else {
  printLine("Save me!")
};

printLine("Do I rock?!");

//while readLine() != "no" {
//  printLine("Everything is better than a 'no'!")
//}

data Cat {
  name: String,
  age: Integer
}

var tom = Cat { name: "Tom", age: 4 };
printLine(tom.name);
printLine(tom.age == 4);

for i in 1..3 {
  printLine("iteration " + i);
}

//var name: String = 123

tom;
(5 + 3);
add((5 + ((3))), 2);

enum Wow { Integer, String, 'None }

var x: Wow = 5;
printLine(x);
x = "I'm a text now";
printLine(x);
x = 'None;
printLine(x);

func check(num: Integer): Wow {
  if num <= 5 { num }
  else if num <= 100 { "it's a big one" }
  else { 'None }
}

printLine(check(3));
printLine(check(50));
printLine(check(101));

enum Option<T> { T, 'None }

func returnIfSmall(num: Integer): Option<Integer> {
  if num <= 5 { num } else { 'None }
}

func noneToFortyTwo(opt: Option<Integer>): Integer {
  if opt == 'None { 42 } else { opt as Integer }
}

printLine(noneToFortyTwo(returnIfSmall(5)));
printLine(noneToFortyTwo(returnIfSmall(100)));
printLine(noneToFortyTwo(5));
printLine(noneToFortyTwo('None));

var matched = match 5 {
  3: "three",
  2 + 3: "two plus three",
  else: "math is broken"
};
printLine(matched);

func add(s: String, ss: String): String {
  "string sum: " + s + ss
}
printLine(add("hello, ", "world"));

func speak(c: Cat): String { "meow" }
func speak(c: Cat, s: String): String { "meow " + s + " meow" }

data Dog {}
func speak(d: Dog): String { "woof" }
func speak(d: Dog, s: String): String { "woof " + s + " woof" }

makeSpeak(tom);
makeSpeak(Dog {});

tom.makeSpeak();
Dog{}.makeSpeak();

func printLine(s: String, ss: String): String {
  printLine("s: " + s);
  printLine("ss: " + ss);
  "done"
}

printLine("overloaded", "built-in");
"overloaded".printLine("built-in");
