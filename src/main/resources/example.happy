import src.main.resources.another.{test}

test("works")

let a = 1
let b = a + 1

function add(a: Integer, b: Integer): Integer {
  printLine("adding " + a + " to " + b)
  a + b
}

//add("not a number", "not a number either")

printLine(add(add(a, 100), b + 10))
printLine(a.add(b).add(b))

printLine("Hello, World!")

function print(s: String): String {
  printLine(s)
  s
}
"Hello, Happy!".print()

if a > 0 {
  printLine("Math works!")
} else {
  printLine("Math")
  printLine("is")
  printLine("in")
  printLine("trouble!")
}

let name = "Happy Lang"

if name != "Unhappy Lang" {
  printLine("I'm a Happy dev!")
} else {
  printLine("Save me!")
}

printLine("Do I rock?!")

//while readLine() != "no" {
//  printLine("Everything is better than a 'no'!")
//}

data Cat {
  name: String,
  age: Integer
}

let tom = Cat { name: "Tom", age: 4 }
printLine(tom.name)
printLine(tom.age == 4)

for i in 1..3 {
  printLine("iteration " + i)
}

//let name: String = 123

tom;
(5 + 3)
add((5 + ((3))), 2)

enum Wow { Integer, String, 'None }

let x: Wow = 5
printLine(x)
x = "I'm a text now"
printLine(x)
x = 'None
printLine(x)

function check(num: Integer): Wow {
  if num <= 5 { num }
  else if num <= 100 { "it's a big one" }
  else { 'None }
}

printLine(check(3))
printLine(check(50))
printLine(check(101))

enum Option<T> { T, 'None }

function returnIfSmall(num: Integer): Option<Integer> {
  if num <= 5 { num } else { 'None }
}

function noneToFortyTwo(opt: Option<Integer>): Integer {
  if opt == 'None { 42 } else { opt as Integer }
}

printLine(noneToFortyTwo(returnIfSmall(5)))
printLine(noneToFortyTwo(returnIfSmall(100)))
printLine(noneToFortyTwo(5))
printLine(noneToFortyTwo('None))

let matched = match 5 {
  3: "three",
  2 + 3: "two plus three",
  else: "math is broken"
}
printLine(matched)

function add(s: String, ss: String): String {
  "string sum: " + s + ss
}
printLine(add("hello, ", "world"))

interface Animal {
  speak(): String
}

function makeSpeak(a: Animal): String {
  printLine(a.speak())
  "done"
}

function speak(c: Cat): String { "meow" }

data Dog {}
function speak(d: Dog): String { "woof" }

makeSpeak(tom)
makeSpeak(Dog {})
